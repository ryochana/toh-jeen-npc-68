import React, { useState, useEffect }         console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets...')
        const response = await fetch('/api/sync-sheets')
        
        if (!response.ok) {
          throw new Error(`Failed to fetch data: ${response.status}`)
        }
        
        const data = await response.json()
        console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets:', data)m 'react'
import { toast } from 'react-hot-toast'
import { 
  Users, 
  Edit, 
  Trash2, 
  Plus, 
  Check, 
  X, 
  ArrowRightLeft,
  MapPin,
  CreditCard,
  Cloud,
  CloudOff
} from 'lucide-react'
import BookingModal from './BookingModal'
import googleSheetsService from '../services/googleSheetsService'
import './TableBookingSystem.css'

const TableBookingSystem = () => {
  const [tables, setTables] = useState([])
  const [outsideTables, setOutsideTables] = useState([])
  const [selectedTable, setSelectedTable] = useState(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [modalMode, setModalMode] = useState('create') // 'create', 'edit'
  const [isDragMode, setIsDragMode] = useState(false)
  const [draggedTable, setDraggedTable] = useState(null)
  const [activityLog, setActivityLog] = useState([])
  const [showActivityLog, setShowActivityLog] = useState(false)
  const [lastState, setLastState] = useState(null)
  const [canUndo, setCanUndo] = useState(false)
  const [isOnline, setIsOnline] = useState(navigator.onLine)
  const [lastSyncTime, setLastSyncTime] = useState(null)

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  useEffect(() => {
    const loadDataFromSheets = async () => {
      try {
        console.log('ÔøΩ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets...')
        await googleSheetsService.initialize()
        const data = await googleSheetsService.loadAllData()
        
        if (data && data.tables && Array.isArray(data.tables) && data.tables.length > 0) {
          setTables(data.tables)
          setOutsideTables(data.outsideTables || [])
          setActivityLog(data.activityLog || [])
          console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', {
            tables: data.tables?.length || 0,
            outsideTables: data.outsideTables?.length || 0,
            activityLog: data.activityLog?.length || 0
          })
          toast.success('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
        } else {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets
          console.log('üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô')
          const initialTables = []
          let tableNumber = 1
          for (let row = 1; row <= 11; row++) {
            for (let col = 1; col <= 5; col++) {
              initialTables.push({
                id: `${tableNumber.toString().padStart(2, '0')}`,
                displayName: `‡πÇ‡∏ï‡πä‡∏∞ ${tableNumber.toString().padStart(2, '0')}`,
                row,
                col,
                booking: null,
                position: 'inside'
              })
              tableNumber++
            }
          }
          setTables(initialTables)
          addToActivityLog('üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 55 ‡πÇ‡∏ï‡πä‡∏∞')
          
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏õ Google Sheets
          try {
            await syncToGoogleSheets()
            console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏õ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
          } catch (syncError) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:', syncError)
          }
        }
      } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error)
        toast.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets ‡πÑ‡∏î‡πâ')
        
        // Fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const initialTables = []
        let tableNumber = 1
        for (let row = 1; row <= 11; row++) {
          for (let col = 1; col <= 5; col++) {
            initialTables.push({
              id: `${tableNumber.toString().padStart(2, '0')}`,
              displayName: `‡πÇ‡∏ï‡πä‡∏∞ ${tableNumber.toString().padStart(2, '0')}`,
              row,
              col,
              booking: null,
              position: 'inside'
            })
            tableNumber++
          }
        }
        setTables(initialTables)
        addToActivityLog('üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 55 ‡πÇ‡∏ï‡πä‡∏∞ (Fallback)')
      }
    }

    loadDataFromSheets()
  }, [])

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Sheets ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  useEffect(() => {
    if (tables.length > 0 || outsideTables.length > 0) {
      console.log('üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Sheets:', { 
        tables: tables.length, 
        outsideTables: outsideTables.length, 
        activityLog: activityLog.length,
        timestamp: new Date().toLocaleString('th-TH')
      })
      
      // Auto sync ‡πÑ‡∏õ Google Sheets ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (isOnline) {
        syncToGoogleSheets()
      }
    }
  }, [tables, outsideTables, activityLog])

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Undo
  const saveStateForUndo = (action) => {
    setLastState({
      tables: [...tables],
      outsideTables: [...outsideTables],
      action
    })
    setCanUndo(true)
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Undo
  const undoLastAction = () => {
    if (lastState && canUndo) {
      setTables(lastState.tables)
      setOutsideTables(lastState.outsideTables)
      addToActivityLog(`üîô ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£${lastState.action}`)
      setCanUndo(false)
      setLastState(null)
      toast.success(`‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£${lastState.action}‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô Log
  const addToActivityLog = (message) => {
    const newActivity = {
      id: Date.now(),
      message,
      timestamp: new Date().toLocaleString('th-TH'),
      time: new Date().toLocaleTimeString('th-TH')
    }
    setActivityLog(prev => [newActivity, ...prev.slice(0, 49)]) // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Modal ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î
  useEffect(() => {
    if (isModalOpen || showActivityLog) {
      document.body.classList.add('modal-open')
    } else {
      document.body.classList.remove('modal-open')
    }
    
    // Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount
    return () => {
      document.body.classList.remove('modal-open')
    }
  }, [isModalOpen, showActivityLog])

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Online/Offline
  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true)
      toast.success('üåê ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß')
      // Auto sync when back online
      syncToGoogleSheets()
    }
    
    const handleOffline = () => {
      setIsOnline(false)
      toast.error('üì± ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå')
    }

    window.addEventListener('online', handleOnline)
    window.addEventListener('offline', handleOffline)

    return () => {
      window.removeEventListener('online', handleOnline)
      window.removeEventListener('offline', handleOffline)
    }
  }, [tables, outsideTables, activityLog])

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Sheets
  const syncToGoogleSheets = async (showNotification = false) => {
    if (!isOnline) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ sync ‡πÑ‡∏î‡πâ - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï')
      return false
    }

    try {
      const dataToSync = {
        tables,
        outsideTables,
        activityLog
      }
      
      console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Sheets:', {
        tables: tables.length,
        outsideTables: outsideTables.length,
        activityLog: activityLog.length
      })
      
      const response = await fetch('/api/sync-sheets', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(dataToSync)
      })
      
      if (!response.ok) {
        throw new Error(`Failed to sync: ${response.status}`)
      }
      
      const result = await response.json()
      
      if (result.success) {
        setLastSyncTime(new Date())
        console.log('‚úÖ Auto sync ‡πÑ‡∏õ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
        if (showNotification) {
          toast.success('üìä Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
        }
        return true
      } else {
        throw new Error(result.error || 'Sync failed')
      }
    } catch (error) {
      console.error('‚ùå Sync error:', error)
      if (showNotification) {
        toast.error('‚ùå Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')
      }
      return false
    }
  }

  // ‡∏•‡∏ö auto sync ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ - ‡πÉ‡∏´‡πâ sync ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

  const handleTableClick = (table) => {
    if (isDragMode) {
      // ‡πÇ‡∏´‡∏°‡∏î‡∏•‡∏≤‡∏Å
      if (draggedTable) {
        if (draggedTable.id === table.id) {
          // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å
          setDraggedTable(null)
          toast.info('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡πÇ‡∏ï‡πä‡∏∞')
        } else {
          // ‡∏•‡∏≤‡∏Å‡πÑ‡∏õ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏ï‡πä‡∏∞‡∏≠‡∏∑‡πà‡∏ô (‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)
          handleTableDrop(table)
        }
      } else {
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏≤‡∏Å
        setDraggedTable(table)
        toast.info(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ï‡πä‡∏∞ ${table.displayName || table.id} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏≤‡∏Å - ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏à‡∏∏‡∏î‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢`)
      }
      return
    }

    // ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: ‡πÄ‡∏õ‡∏¥‡∏î modal
    if (table.booking) {
      setSelectedTable(table)
      setModalMode('edit')
      setIsModalOpen(true)
    } else {
      setSelectedTable(table)
      setModalMode('create')
      setIsModalOpen(true)
    }
  }

  const handleBookTable = (bookingData) => {
    saveStateForUndo(modalMode === 'create' ? '‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞' : '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á')
    
    if (modalMode === 'create') {
      const updatedTables = tables.map(table =>
        table.id === selectedTable.id
          ? { ...table, booking: { ...bookingData, id: Date.now() } }
          : table
      )
      const updatedOutside = outsideTables.map(table =>
        table.id === selectedTable.id
          ? { ...table, booking: { ...bookingData, id: Date.now() } }
          : table
      )
      
      if (selectedTable.position === 'inside') {
        setTables(updatedTables)
      } else {
        setOutsideTables(updatedOutside)
      }
      
      addToActivityLog(`üìù ‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ ${selectedTable.displayName || selectedTable.id} ‡πÇ‡∏î‡∏¢ ${bookingData.bookerName}`)
      toast.success(`‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ ${selectedTable.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
    } else {
      const updatedTables = tables.map(table =>
        table.id === selectedTable.id
          ? { ...table, booking: { ...table.booking, ...bookingData } }
          : table
      )
      const updatedOutside = outsideTables.map(table =>
        table.id === selectedTable.id
          ? { ...table, booking: { ...table.booking, ...bookingData } }
          : table
      )
      
      if (selectedTable.position === 'inside') {
        setTables(updatedTables)
      } else {
        setOutsideTables(updatedOutside)
      }
      
      addToActivityLog(`‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ ${selectedTable.displayName || selectedTable.id}`)
      toast.success(`‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞ ${selectedTable.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
    }
    setIsModalOpen(false)
  }

  const handleDeleteBooking = (tableId) => {
    saveStateForUndo('‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á')
    
    const updatedTables = tables.map(table =>
      table.id === tableId ? { ...table, booking: null } : table
    )
    const updatedOutside = outsideTables.map(table =>
      table.id === tableId ? { ...table, booking: null } : table
    )
    
    setTables(updatedTables)
    setOutsideTables(updatedOutside)
    addToActivityLog(`üóëÔ∏è ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ ${tableId}`)
    toast.success(`‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ ${tableId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
    setIsModalOpen(false)
  }

  const moveTableOutside = (tableId) => {
    saveStateForUndo('‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å')
    const table = tables.find(t => t.id === tableId)
    if (table) {
      const newOutsideTable = { ...table, position: 'outside' }
      setOutsideTables([...outsideTables, newOutsideTable])
      setTables(tables.filter(t => t.id !== tableId))
      addToActivityLog(`üöö ‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞ ${tableId} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°`)
      toast.success(`‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞ ${tableId} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°`)
    }
  }

  const moveTableInside = (tableId) => {
    saveStateForUndo('‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô')
    const table = outsideTables.find(t => t.id === tableId)
    if (table) {
      const newInsideTable = { ...table, position: 'inside' }
      setTables([...tables, newInsideTable].sort((a, b) => {
        if (a.row !== b.row) return a.row - b.row
        return a.col - b.col
      }))
      setOutsideTables(outsideTables.filter(t => t.id !== tableId))
      addToActivityLog(`üè¢ ‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞ ${tableId} ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°`)
      toast.success(`‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞ ${tableId} ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°`)
    }
  }

  const deleteTable = (tableId) => {
    if (confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞ ${tableId} ‡∏ñ‡∏≤‡∏ß‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
      saveStateForUndo('‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞')
      setTables(tables.filter(t => t.id !== tableId))
      setOutsideTables(outsideTables.filter(t => t.id !== tableId))
      addToActivityLog(`‚ùå ‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞ ${tableId} ‡∏ñ‡∏≤‡∏ß‡∏£`)
      toast.success(`‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞ ${tableId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
    }
  }

  const addNewOutsideTable = () => {
    saveStateForUndo('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏≠‡∏Å‡∏´‡∏≠')
    const newId = `OUT${outsideTables.length + 1}`
    const newTable = {
      id: newId,
      displayName: `‡∏ô‡∏≠‡∏Å‡∏´‡∏≠ ${outsideTables.length + 1}`,
      row: 0,
      col: 0,
      booking: null,
      position: 'outside'
    }
    setOutsideTables([...outsideTables, newTable])
    addToActivityLog(`‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏≠‡∏Å‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ${newId}`)
    toast.success(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏≠‡∏Å‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ${newId}`)
  }

  const addNewTable = () => {
    saveStateForUndo('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏´‡∏°‡πà')
    const allTables = [...tables, ...outsideTables]
    const maxId = Math.max(...allTables.map(t => {
      const num = parseInt(t.id.replace(/[^0-9]/g, ''))
      return isNaN(num) ? 0 : num
    }), 60)
    
    const newId = `${(maxId + 1).toString().padStart(2, '0')}`
    
    // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏¥‡∏î
    let newRow = 1
    let newCol = 1
    let positionFound = false
    
    for (let row = 1; row <= 20; row++) { // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÑ‡∏î‡πâ‡∏ñ‡∏∂‡∏á 20
      for (let col = 1; col <= 5; col++) {
        const existingTable = tables.find(t => t.row === row && t.col === col)
        if (!existingTable) {
          newRow = row
          newCol = col
          positionFound = true
          break
        }
      }
      if (positionFound) break
    }
    
    const newTable = {
      id: newId,
      displayName: `‡πÇ‡∏ï‡πä‡∏∞ ${newId}`,
      row: newRow,
      col: newCol,
      booking: null,
      position: 'inside'
    }
    
    setTables([...tables, newTable].sort((a, b) => {
      if (a.row !== b.row) return a.row - b.row
      return a.col - b.col
    }))
    addToActivityLog(`‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏´‡∏°‡πà ${newId} ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß ${newRow} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ${newCol}`)
    toast.success(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏´‡∏°‡πà ${newId} ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß ${newRow} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ${newCol}`)
  }

  const toggleDragMode = () => {
    setIsDragMode(!isDragMode)
    setDraggedTable(null)
    if (!isDragMode) {
      toast.info('üéØ ‡πÇ‡∏´‡∏°‡∏î‡∏•‡∏≤‡∏Å‡πÇ‡∏ï‡πä‡∏∞: ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á')
    } else {
      toast.info('‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥')
    }
  }

  const handleTableDrop = (targetTable = null, targetRow = null, targetCol = null, targetPosition = 'inside') => {
    if (!draggedTable) return

    saveStateForUndo('‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞')
    let newRow, newCol, newPosition
    
    if (targetTable) {
      // ‡∏•‡∏≤‡∏Å‡πÑ‡∏õ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏ï‡πä‡∏∞‡∏≠‡∏∑‡πà‡∏ô - ‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      newRow = targetTable.row
      newCol = targetTable.col  
      newPosition = targetTable.position
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
      const newDraggedTable = {
        ...draggedTable,
        row: newRow,
        col: newCol,
        position: newPosition
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏•‡∏≤‡∏Å
      const newTargetTable = {
        ...targetTable,
        row: draggedTable.row,
        col: draggedTable.col,
        position: draggedTable.position
      }
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô
      const updatedTables = tables.filter(t => t.id !== draggedTable.id && t.id !== targetTable.id)
      if (newDraggedTable.position === 'inside') updatedTables.push(newDraggedTable)
      if (newTargetTable.position === 'inside') updatedTables.push(newTargetTable)
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏ï‡πä‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å
      const updatedOutsideTables = outsideTables.filter(t => t.id !== draggedTable.id && t.id !== targetTable.id)
      if (newDraggedTable.position === 'outside') updatedOutsideTables.push(newDraggedTable)
      if (newTargetTable.position === 'outside') updatedOutsideTables.push(newTargetTable)
      
      setTables(updatedTables.sort((a, b) => {
        if (a.row !== b.row) return a.row - b.row
        return a.col - b.col
      }))
      setOutsideTables(updatedOutsideTables)
      
      addToActivityLog(`üîÑ ‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÇ‡∏ï‡πä‡∏∞ ${draggedTable.displayName || draggedTable.id} ‡∏Å‡∏±‡∏ö ${targetTable.displayName || targetTable.id}`)
      toast.success(`‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÇ‡∏ï‡πä‡∏∞ ${draggedTable.displayName || draggedTable.id} ‡∏Å‡∏±‡∏ö ${targetTable.displayName || targetTable.id}`)
    } else {
      // ‡∏•‡∏≤‡∏Å‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á
      newRow = targetRow
      newCol = targetCol
      newPosition = targetPosition
      
      const newTable = {
        ...draggedTable,
        row: newRow,
        col: newCol,
        position: newPosition
      }

      // ‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
      if (draggedTable.position === 'inside') {
        setTables(tables.filter(t => t.id !== draggedTable.id))
      } else {
        setOutsideTables(outsideTables.filter(t => t.id !== draggedTable.id))
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
      if (newPosition === 'inside') {
        setTables([...tables.filter(t => t.id !== draggedTable.id), newTable].sort((a, b) => {
          if (a.row !== b.row) return a.row - b.row
          return a.col - b.col
        }))
      } else {
        setOutsideTables([...outsideTables.filter(t => t.id !== draggedTable.id), newTable])
      }
      
      addToActivityLog(`üéØ ‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞ ${draggedTable.displayName || draggedTable.id} ‡πÑ‡∏õ ${newPosition === 'inside' ? '‡πÉ‡∏ô‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°' : '‡∏ô‡∏≠‡∏Å‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'}`)
      toast.success(`‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞ ${draggedTable.displayName || draggedTable.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
    }

    setDraggedTable(null)
  }

  const restoreAllTables = () => {
    if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏∑‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)')) {
      const initialTables = []
      let tableNumber = 1
      
      for (let row = 1; row <= 11; row++) {
        for (let col = 1; col <= 5; col++) {
          const tableId = `${tableNumber.toString().padStart(2, '0')}`
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const existingTable = tables.find(t => t.id === tableId) || 
                               outsideTables.find(t => t.id === tableId)
          
          if (!existingTable) {
            initialTables.push({
              id: tableId,
              displayName: `‡πÇ‡∏ï‡πä‡∏∞ ${tableId}`,
              row,
              col,
              booking: null,
              position: 'inside'
            })
          }
          tableNumber++
        }
      }
      
      setTables([...tables, ...initialTables].sort((a, b) => {
        if (a.row !== b.row) return a.row - b.row
        return a.col - b.col
      }))
      
      toast.success(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏Ñ‡∏∑‡∏ô ${initialTables.length} ‡πÇ‡∏ï‡πä‡∏∞`)
    }
  }

  const getTableStatusClass = (table) => {
    if (!table.booking) return 'table-available'
    if (table.booking.isPaid) return 'table-paid'
    return 'table-booked'
  }

  const getStatusText = (table) => {
    if (!table.booking) return '‡∏ß‡πà‡∏≤‡∏á'
    if (table.booking.isPaid) return '‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
    return '‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß'
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export JSON
  const exportData = () => {
    const data = { tables, outsideTables, activityLog }
    const dataStr = JSON.stringify(data, null, 2)
    const dataBlob = new Blob([dataStr], { type: 'application/json' })
    const url = URL.createObjectURL(dataBlob)
    const link = document.createElement('a')
    link.href = url
    link.download = `table-bookings-${new Date().toISOString().split('T')[0]}.json`
    link.click()
    URL.revokeObjectURL(url)
    toast.success('üì• Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÉ‡∏ô Console
  const showDataInConsole = () => {
    const data = { tables, outsideTables, activityLog }
    console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:', data)
    console.table(tables.filter(t => t.booking).map(t => ({
      ‡πÇ‡∏ï‡πä‡∏∞: t.displayName,
      ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: t.booking.bookerName,
      ‡πÄ‡∏ö‡∏≠‡∏£‡πå: t.booking.phone,
      ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß: t.booking.isPaid ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'
    })))
    toast.success('üìã ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Console ‡πÅ‡∏•‡πâ‡∏ß (‡∏Å‡∏î F12)')
  }

  return (
    <div className="table-booking-system">
      <div className="main-content">
        <div className="hall-container">
          <div className="stage">
            <h3>üé≠ ‡πÄ‡∏ß‡∏ó‡∏µ</h3>
          </div>
          
          <div className="tables-grid">
            {Array.from({length: Math.max(11, Math.max(...tables.map(t => t.row), 0))}, (_, i) => i + 1).map(row => (
              <div key={row} className="table-row">
                {/* ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢ 2 ‡πÇ‡∏ï‡πä‡∏∞ */}
                <div className="table-section left-section">
                  {tables
                    .filter(table => table.row === row && table.col <= 2)
                    .sort((a, b) => a.col - b.col)
                    .map(table => (
                      <div
                        key={table.id}
                        className={`table-item ${getTableStatusClass(table)} ${
                          isDragMode ? 'drag-mode' : ''
                        } ${
                          draggedTable && draggedTable.id === table.id ? 'dragged' : ''
                        }`}
                        onClick={() => handleTableClick(table)}
                        title={`${table.displayName || table.id} - ${getStatusText(table)}`}
                      >
                        <div className="table-number">{table.displayName || table.id}</div>
                        <div className="table-status">{getStatusText(table)}</div>
                        {table.booking && (
                          <div className="booker-name">{table.booking.bookerName}</div>
                        )}
                        {!isDragMode && (
                          <div className="table-actions">
                            <button
                              className="move-btn"
                              onClick={(e) => {
                                e.stopPropagation()
                                moveTableOutside(table.id)
                              }}
                              title="‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°"
                            >
                              <ArrowRightLeft size={12} />
                            </button>
                            <button
                              className="delete-btn"
                              onClick={(e) => {
                                e.stopPropagation()
                                deleteTable(table.id)
                              }}
                              title="‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ñ‡∏≤‡∏ß‡∏£"
                            >
                              <Trash2 size={10} />
                            </button>
                          </div>
                        )}
                      </div>
                    ))}
                  
                  {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏•‡∏≤‡∏Å - ‡∏ã‡πâ‡∏≤‡∏¢ */}
                  {isDragMode && draggedTable && [1, 2].map(col => {
                    const hasTable = tables.some(t => t.row === row && t.col === col)
                    if (hasTable) return null
                    return (
                      <div
                        key={`drop-${row}-${col}`}
                        className="drop-zone"
                        onClick={() => handleTableDrop(null, row, col, 'inside')}
                        title="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà"
                      >
                        üìç
                      </div>
                    )
                  })}
                </div>

                {/* ‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á */}
                <div className="aisle">
                  <div className="aisle-line"></div>
                </div>

                {/* ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤ 3 ‡πÇ‡∏ï‡πä‡∏∞ */}
                <div className="table-section right-section">
                  {tables
                    .filter(table => table.row === row && table.col > 2)
                    .sort((a, b) => a.col - b.col)
                    .map(table => (
                      <div
                        key={table.id}
                        className={`table-item ${getTableStatusClass(table)} ${
                          isDragMode ? 'drag-mode' : ''
                        } ${
                          draggedTable && draggedTable.id === table.id ? 'dragged' : ''
                        }`}
                        onClick={() => handleTableClick(table)}
                        title={`${table.displayName || table.id} - ${getStatusText(table)}`}
                      >
                        <div className="table-number">{table.displayName || table.id}</div>
                        <div className="table-status">{getStatusText(table)}</div>
                        {table.booking && (
                          <div className="booker-name">{table.booking.bookerName}</div>
                        )}
                        {!isDragMode && (
                          <div className="table-actions">
                            <button
                              className="move-btn"
                              onClick={(e) => {
                                e.stopPropagation()
                                moveTableOutside(table.id)
                              }}
                              title="‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°"
                            >
                              <ArrowRightLeft size={12} />
                            </button>
                            <button
                              className="delete-btn"
                              onClick={(e) => {
                                e.stopPropagation()
                                deleteTable(table.id)
                              }}
                              title="‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ñ‡∏≤‡∏ß‡∏£"
                            >
                              <Trash2 size={10} />
                            </button>
                          </div>
                        )}
                      </div>
                    ))}
                  
                  {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏•‡∏≤‡∏Å - ‡∏Ç‡∏ß‡∏≤ */}
                  {isDragMode && draggedTable && [3, 4, 5].map(col => {
                    const hasTable = tables.some(t => t.row === row && t.col === col)
                    if (hasTable) return null
                    return (
                      <div
                        key={`drop-${row}-${col}`}
                        className="drop-zone"
                        onClick={() => handleTableDrop(null, row, col, 'inside')}
                        title="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà"
                      >
                        üìç
                      </div>
                    )
                  })}
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="top-controls">
          <div className="top-left-controls">
            <button 
              className="activity-log-btn"
              onClick={() => setShowActivityLog(!showActivityLog)}
            >
              üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            </button>
            {canUndo && (
              <button 
                className="undo-btn"
                onClick={undoLastAction}
              >
                ‚Ü∂ ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
              </button>
            )}
          </div>
          <div className="top-right-controls">
            <div className="sync-status">
              {isOnline ? (
                <div className="online-status">
                  <Cloud size={16} />
                  <span>Online - Auto Sync</span>
                </div>
              ) : (
                <div className="offline-status">
                  <CloudOff size={16} />
                  <span>Offline</span>
                </div>
              )}
              {lastSyncTime && (
                <div className="last-sync">
                  Last: {lastSyncTime.toLocaleTimeString('th-TH')}
                </div>
              )}
            </div>
          </div>
        </div>

        <div className="summary">
          <div className="summary-item">
            <div className="summary-icon available">
              <Users size={16} />
            </div>
            <span>‡∏ß‡πà‡∏≤‡∏á: {tables.filter(t => !t.booking).length + outsideTables.filter(t => !t.booking).length}</span>
          </div>
          <div className="summary-item">
            <div className="summary-icon booked">
              <Users size={16} />
            </div>
            <span>‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß: {tables.filter(t => t.booking && !t.booking.isPaid).length + outsideTables.filter(t => t.booking && !t.booking.isPaid).length}</span>
          </div>
          <div className="summary-item">
            <div className="summary-icon paid">
              <CreditCard size={16} />
            </div>
            <span>‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß: {tables.filter(t => t.booking && t.booking.isPaid).length + outsideTables.filter(t => t.booking && t.booking.isPaid).length}</span>
          </div>
          <div className="summary-item">
            <button 
              className={`magic-btn ${isDragMode ? 'active' : ''}`} 
              onClick={toggleDragMode}
            >
              ‚ú® {isDragMode ? '‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏•‡∏≤‡∏Å' : '‡πÇ‡∏´‡∏°‡∏î‡∏•‡∏≤‡∏Å‡πÇ‡∏ï‡πä‡∏∞'}
            </button>
          </div>
          <div className="summary-item">
            <button className="add-btn" onClick={addNewTable}>
              ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏´‡∏°‡πà
            </button>
          </div>
          <div className="summary-item">
            <button className="restore-btn" onClick={restoreAllTables}>
              üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏Ñ‡∏∑‡∏ô
            </button>
          </div>
          <div className="summary-item">
            <button className="export-btn" onClick={exportData}>
              üì• Export JSON
            </button>
          </div>
          <div className="summary-item">
            <button className="console-btn" onClick={showDataInConsole}>
              üìã ‡∏î‡∏π Console
            </button>
          </div>
        </div>
      </div>

      <div className="outside-tables">
        <div className="outside-header">
          <h3>
            <MapPin size={20} />
            ‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏≠‡∏Å‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
          </h3>
          <button className="add-table-btn" onClick={addNewOutsideTable}>
            <Plus size={16} />
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞
          </button>
        </div>
        
        <div className="outside-tables-grid">
          {outsideTables.map(table => (
            <div
              key={table.id}
              className={`table-item ${getTableStatusClass(table)} ${
                isDragMode ? 'drag-mode' : ''
              } ${
                draggedTable && draggedTable.id === table.id ? 'dragged' : ''
              }`}
              onClick={() => handleTableClick(table)}
            >
              <div className="table-number">{table.displayName || table.id}</div>
              <div className="table-status">{getStatusText(table)}</div>
              {table.booking && (
                <div className="booker-name">{table.booking.bookerName}</div>
              )}
              {!isDragMode && (
                <div className="table-actions">
                  <button
                    className="move-btn"
                    onClick={(e) => {
                      e.stopPropagation()
                      moveTableInside(table.id)
                    }}
                    title="‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°"
                  >
                    <ArrowRightLeft size={12} />
                  </button>
                  <button
                    className="delete-btn"
                    onClick={(e) => {
                      e.stopPropagation()
                      setOutsideTables(outsideTables.filter(t => t.id !== table.id))
                      toast.success(`‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞ ${table.displayName || table.id}`)
                    }}
                    title="‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞"
                  >
                    <Trash2 size={12} />
                  </button>
                </div>
              )}
            </div>
          ))}
          
          {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏≠‡∏Å‡∏´‡∏≠ */}
          {isDragMode && draggedTable && (
            <div
              className="drop-zone outside-drop"
              onClick={() => handleTableDrop(null, 0, 0, 'outside')}
              title="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏≠‡∏Å‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°"
            >
              üìç ‡∏ß‡∏≤‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            </div>
          )}
        </div>
      </div>

      {isModalOpen && (
        <BookingModal
          table={selectedTable}
          mode={modalMode}
          onBook={handleBookTable}
          onDelete={handleDeleteBooking}
          onClose={() => setIsModalOpen(false)}
        />
      )}

      {/* Activity Log Modal */}
      {showActivityLog && (
        <div className="modal-overlay" onClick={() => setShowActivityLog(false)}>
          <div className="activity-log-modal" onClick={(e) => e.stopPropagation()}>
            <div className="activity-log-header">
              <h3>üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h3>
              <button 
                className="close-btn"
                onClick={() => setShowActivityLog(false)}
              >
                ‚úï
              </button>
            </div>
            <div className="activity-log-content">
              {activityLog.length === 0 ? (
                <div className="no-activity">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</div>
              ) : (
                <div className="activity-list">
                  {activityLog.map(activity => (
                    <div key={activity.id} className="activity-item">
                      <div className="activity-message">{activity.message}</div>
                      <div className="activity-time">{activity.time}</div>
                    </div>
                  ))}
                </div>
              )}
            </div>
            <div className="activity-log-footer">
              <button 
                className="clear-log-btn"
                onClick={() => {
                  if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                    setActivityLog([])
                    toast.success('‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß')
                  }
                }}
              >
                üóëÔ∏è ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default TableBookingSystem
